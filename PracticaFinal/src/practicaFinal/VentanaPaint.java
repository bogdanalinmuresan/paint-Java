/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package practicaFinal;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.GradientPaint;
import java.awt.Graphics2D;
import java.awt.HeadlessException;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.color.ColorSpace;
import java.awt.color.ICC_ColorSpace;
import java.awt.color.ICC_Profile;
import java.awt.geom.AffineTransform;
import java.awt.geom.Point2D;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.awt.image.ByteLookupTable;
import java.awt.image.ColorConvertOp;
import java.awt.image.ConvolveOp;
import java.awt.image.Kernel;
import java.awt.image.LookupOp;
import java.awt.image.LookupTable;
import java.awt.image.RescaleOp;
import java.io.File;
import java.io.IOException;
import static java.lang.Integer.parseInt;
import static java.lang.Math.abs;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import javax.swing.JSlider;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import sm.bam.figuras.FiguraGeometrica;
import sm.bam.imagen.RestaOp;
import sm.bam.imagen.SumaOp;
import sm.bam.imagen.UmbralizacionOp;
import sm.image.*;
import sm.image.BinaryOp;
/**
 *clase que representa la interfaz del programa
 * @author Bogdan Alin Muresan
 * @version 1.0
 * 
 */
public class VentanaPaint extends javax.swing.JFrame {    
    //variable necesaria para aplicar brillo
    BufferedImage img_fuente;
    
    public VentanaPaint() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        GroupButtonNav = new javax.swing.ButtonGroup();
        buttonGroup2PaletaColores = new javax.swing.ButtonGroup();
        buttonGroupBotonesContraste = new javax.swing.ButtonGroup();
        buttonGroupRotacion = new javax.swing.ButtonGroup();
        buttonGroupEscalar = new javax.swing.ButtonGroup();
        buttonOpcionArchivo = new javax.swing.ButtonGroup();
        barraNavegacion = new javax.swing.JToolBar();
        botonNuevo = new javax.swing.JToggleButton();
        botonAbrir = new javax.swing.JToggleButton();
        botonGuardar = new javax.swing.JToggleButton();
        botonClon = new javax.swing.JToggleButton();
        separadorFormas = new javax.swing.JToolBar.Separator();
        botonDibujarPunto = new javax.swing.JToggleButton();
        botonDibujarLinea = new javax.swing.JToggleButton();
        botonDibujarCuadrado = new javax.swing.JToggleButton();
        botonDibujarRecRedondo = new javax.swing.JToggleButton();
        botonLineaCurva = new javax.swing.JToggleButton();
        botonDibujarElipse = new javax.swing.JToggleButton();
        botonEditar = new javax.swing.JToggleButton();
        separadorColores = new javax.swing.JToolBar.Separator();
        listaColores = new javax.swing.JComboBox();
        separadorAtributos = new javax.swing.JToolBar.Separator();
        listaGrosor = new javax.swing.JSpinner();
        botonRellenar = new javax.swing.JToggleButton();
        botonTransparencia = new javax.swing.JToggleButton();
        botonAlisar = new javax.swing.JToggleButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        contenedorPosRaton = new javax.swing.JPanel();
        etiquetaPosRaton = new javax.swing.JLabel();
        mousePosition = new javax.swing.JLabel();
        contenedorEscritorio = new javax.swing.JPanel();
        panelHerramientas = new javax.swing.JPanel();
        contenedorTrazo = new javax.swing.JPanel();
        contenedorTrazoInterno = new javax.swing.JPanel();
        listaTrazo = new javax.swing.JComboBox();
        listaDegradado = new javax.swing.JComboBox();
        contenedorFiltro = new javax.swing.JPanel();
        contenedorFiltroInterno = new javax.swing.JPanel();
        jComboBoxFiltro = new javax.swing.JComboBox();
        contenedorContraste = new javax.swing.JPanel();
        contenedorContrasteBotones = new javax.swing.JPanel();
        botonContrasteNormal = new javax.swing.JToggleButton();
        botonContrasteIluminacion = new javax.swing.JToggleButton();
        botonContrasteOscurecimiento = new javax.swing.JToggleButton();
        contenedorRotacion = new javax.swing.JPanel();
        contenedorBotonesRotacion = new javax.swing.JPanel();
        jSliderRotacion = new javax.swing.JSlider();
        contenedorBotonesRotacion2 = new javax.swing.JPanel();
        botonRotacion90 = new javax.swing.JToggleButton();
        botonRotacion180 = new javax.swing.JToggleButton();
        botonRotacion270 = new javax.swing.JToggleButton();
        contenedorSeno = new javax.swing.JPanel();
        contenedorBotonSeno = new javax.swing.JPanel();
        botonNegativo = new javax.swing.JToggleButton();
        botonSeno = new javax.swing.JToggleButton();
        botonGrises = new javax.swing.JToggleButton();
        contenedorEscala = new javax.swing.JPanel();
        contenedorBotonesZoom = new javax.swing.JPanel();
        botonEscalaAumentar = new javax.swing.JToggleButton();
        botonEscalaDisminuir = new javax.swing.JToggleButton();
        contenedorBrillo = new javax.swing.JPanel();
        contenedorBrilloInterno = new javax.swing.JPanel();
        etiqBrillo = new javax.swing.JLabel();
        jSliderBrillo = new javax.swing.JSlider();
        contenedorEsq_linea = new javax.swing.JPanel();
        contenedorInterno_Esq_linea = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        sliderRR_LC = new javax.swing.JSlider();
        contenedorUmbralizacion = new javax.swing.JPanel();
        contenedorUmbralizacionInterno = new javax.swing.JPanel();
        etiqUmbralizacion = new javax.swing.JLabel();
        jSliderUmbralizacion = new javax.swing.JSlider();
        contenedorBinarias = new javax.swing.JPanel();
        contenedorBotonesBinarias = new javax.swing.JPanel();
        botonSumaBinario = new javax.swing.JToggleButton();
        botonRestaBinaria = new javax.swing.JToggleButton();
        escritorio = new javax.swing.JDesktopPane();
        panelBarraTrabajo = new javax.swing.JPanel();
        panelBarraNotificacion = new javax.swing.JPanel();
        barraNotificacion = new javax.swing.JLabel();
        jMenuBar2 = new javax.swing.JMenuBar();
        archivo = new javax.swing.JMenu();
        Nuevo = new javax.swing.JMenuItem();
        abrirArchivo = new javax.swing.JMenuItem();
        guardarArchivo = new javax.swing.JMenuItem();
        abrirArchivoAudio = new javax.swing.JMenuItem();
        grabarArchivoAudio = new javax.swing.JMenuItem();
        abrirAudioVideo = new javax.swing.JMenuItem();
        Edicion = new javax.swing.JMenu();
        BarraEstado = new javax.swing.JCheckBoxMenuItem();
        barraFormas = new javax.swing.JCheckBoxMenuItem();
        barraAtributos = new javax.swing.JCheckBoxMenuItem();
        verPanelHerramientas = new javax.swing.JCheckBoxMenuItem();

        FormListener formListener = new FormListener();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 252, 240));

        barraNavegacion.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, null, null, null, new java.awt.Color(153, 153, 153)));
        barraNavegacion.setRollover(true);

        buttonOpcionArchivo.add(botonNuevo);
        botonNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/nuevo.png"))); // NOI18N
        botonNuevo.setToolTipText("nuevo");
        botonNuevo.setFocusable(false);
        botonNuevo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonNuevo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonNuevo.addActionListener(formListener);
        barraNavegacion.add(botonNuevo);

        buttonOpcionArchivo.add(botonAbrir);
        botonAbrir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/abrir.png"))); // NOI18N
        botonAbrir.setToolTipText("abrir");
        botonAbrir.setFocusable(false);
        botonAbrir.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonAbrir.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonAbrir.addActionListener(formListener);
        barraNavegacion.add(botonAbrir);

        buttonOpcionArchivo.add(botonGuardar);
        botonGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/guardar.png"))); // NOI18N
        botonGuardar.setToolTipText("guardar");
        botonGuardar.setFocusable(false);
        botonGuardar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonGuardar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonGuardar.addActionListener(formListener);
        barraNavegacion.add(botonGuardar);

        botonClon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/clonarImg.png"))); // NOI18N
        botonClon.setToolTipText("clonar una imagen");
        botonClon.setFocusable(false);
        botonClon.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonClon.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonClon.addActionListener(formListener);
        barraNavegacion.add(botonClon);
        barraNavegacion.add(separadorFormas);

        GroupButtonNav.add(botonDibujarPunto);
        botonDibujarPunto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/punto.png"))); // NOI18N
        botonDibujarPunto.setToolTipText("punto");
        botonDibujarPunto.setFocusable(false);
        botonDibujarPunto.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonDibujarPunto.setMargin(new java.awt.Insets(0, 0, 0, 0));
        botonDibujarPunto.setMaximumSize(new java.awt.Dimension(62, 62));
        botonDibujarPunto.setMinimumSize(new java.awt.Dimension(62, 62));
        botonDibujarPunto.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonDibujarPunto.addMouseListener(formListener);
        barraNavegacion.add(botonDibujarPunto);

        GroupButtonNav.add(botonDibujarLinea);
        botonDibujarLinea.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/linea.png"))); // NOI18N
        botonDibujarLinea.setToolTipText("línea");
        botonDibujarLinea.setFocusable(false);
        botonDibujarLinea.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonDibujarLinea.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonDibujarLinea.addMouseListener(formListener);
        barraNavegacion.add(botonDibujarLinea);

        GroupButtonNav.add(botonDibujarCuadrado);
        botonDibujarCuadrado.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/rectangulo.png"))); // NOI18N
        botonDibujarCuadrado.setToolTipText("rectángulo");
        botonDibujarCuadrado.setFocusable(false);
        botonDibujarCuadrado.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonDibujarCuadrado.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonDibujarCuadrado.addMouseListener(formListener);
        barraNavegacion.add(botonDibujarCuadrado);

        GroupButtonNav.add(botonDibujarRecRedondo);
        botonDibujarRecRedondo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/rectangulo100.png"))); // NOI18N
        botonDibujarRecRedondo.setToolTipText("Rectángulo redondeado");
        botonDibujarRecRedondo.setFocusable(false);
        botonDibujarRecRedondo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonDibujarRecRedondo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonDibujarRecRedondo.addMouseListener(formListener);
        barraNavegacion.add(botonDibujarRecRedondo);

        GroupButtonNav.add(botonLineaCurva);
        botonLineaCurva.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/linea curva.png"))); // NOI18N
        botonLineaCurva.setToolTipText("linea curva");
        botonLineaCurva.setFocusable(false);
        botonLineaCurva.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonLineaCurva.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonLineaCurva.addMouseListener(formListener);
        barraNavegacion.add(botonLineaCurva);

        GroupButtonNav.add(botonDibujarElipse);
        botonDibujarElipse.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/elipse.png"))); // NOI18N
        botonDibujarElipse.setToolTipText("elipse");
        botonDibujarElipse.setFocusable(false);
        botonDibujarElipse.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonDibujarElipse.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonDibujarElipse.addMouseListener(formListener);
        barraNavegacion.add(botonDibujarElipse);

        GroupButtonNav.add(botonEditar);
        botonEditar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/seleccion.png"))); // NOI18N
        botonEditar.setToolTipText("editar");
        botonEditar.setFocusable(false);
        botonEditar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonEditar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonEditar.addChangeListener(formListener);
        barraNavegacion.add(botonEditar);
        barraNavegacion.add(separadorColores);

        listaColores.setMaximumRowCount(6);
        listaColores.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "rojo", "amarillo", "azul", "negro", "verde", "blanco" }));
        listaColores.setToolTipText("colores");
        listaColores.addActionListener(formListener);
        barraNavegacion.add(listaColores);
        barraNavegacion.add(separadorAtributos);

        listaGrosor.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(1.0f), Float.valueOf(1.0f), Float.valueOf(99.0f), Float.valueOf(1.0f)));
        listaGrosor.setToolTipText("grosor línea");
        listaGrosor.addChangeListener(formListener);
        barraNavegacion.add(listaGrosor);

        botonRellenar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/rellenar.png"))); // NOI18N
        botonRellenar.setToolTipText("rellenar");
        botonRellenar.setFocusable(false);
        botonRellenar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonRellenar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonRellenar.addActionListener(formListener);
        barraNavegacion.add(botonRellenar);

        botonTransparencia.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/transparencia.png"))); // NOI18N
        botonTransparencia.setToolTipText("transparencia");
        botonTransparencia.setFocusable(false);
        botonTransparencia.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonTransparencia.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonTransparencia.addActionListener(formListener);
        barraNavegacion.add(botonTransparencia);

        botonAlisar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/alisar.png"))); // NOI18N
        botonAlisar.setToolTipText("alisar");
        botonAlisar.setFocusable(false);
        botonAlisar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonAlisar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonAlisar.addActionListener(formListener);
        barraNavegacion.add(botonAlisar);
        barraNavegacion.add(jSeparator1);
        barraNavegacion.add(jSeparator2);

        contenedorPosRaton.setLayout(new java.awt.BorderLayout());

        etiquetaPosRaton.setText("pos:");
        contenedorPosRaton.add(etiquetaPosRaton, java.awt.BorderLayout.LINE_START);

        mousePosition.setText("0");
        mousePosition.setToolTipText("posición ratón");
        contenedorPosRaton.add(mousePosition, java.awt.BorderLayout.CENTER);

        barraNavegacion.add(contenedorPosRaton);

        getContentPane().add(barraNavegacion, java.awt.BorderLayout.NORTH);

        contenedorEscritorio.setLayout(new java.awt.BorderLayout());

        panelHerramientas.setBorder(javax.swing.BorderFactory.createTitledBorder("panel de herramientas"));
        panelHerramientas.setLayout(new javax.swing.BoxLayout(panelHerramientas, javax.swing.BoxLayout.Y_AXIS));

        contenedorTrazoInterno.setLayout(new java.awt.GridLayout(1, 0));

        listaTrazo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "continuo", "punteado", "discontinuo" }));
        listaTrazo.setToolTipText("Características del trazo");
        listaTrazo.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        listaTrazo.addActionListener(formListener);
        contenedorTrazoInterno.add(listaTrazo);

        listaDegradado.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "ninguno", "horizontal", "vertical", "diagonal" }));
        listaDegradado.setToolTipText("Tipo de degradado");
        listaDegradado.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        listaDegradado.addActionListener(formListener);
        contenedorTrazoInterno.add(listaDegradado);

        javax.swing.GroupLayout contenedorTrazoLayout = new javax.swing.GroupLayout(contenedorTrazo);
        contenedorTrazo.setLayout(contenedorTrazoLayout);
        contenedorTrazoLayout.setHorizontalGroup(
            contenedorTrazoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(contenedorTrazoInterno, javax.swing.GroupLayout.DEFAULT_SIZE, 294, Short.MAX_VALUE)
        );
        contenedorTrazoLayout.setVerticalGroup(
            contenedorTrazoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(contenedorTrazoInterno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        panelHerramientas.add(contenedorTrazo);

        contenedorFiltro.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        contenedorFiltroInterno.setLayout(new java.awt.GridLayout(1, 0));

        jComboBoxFiltro.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Media", "Binomial", "Enfoque", "Relieve", "Laplaciano" }));
        jComboBoxFiltro.setToolTipText("Filtros");
        jComboBoxFiltro.addActionListener(formListener);
        contenedorFiltroInterno.add(jComboBoxFiltro);

        javax.swing.GroupLayout contenedorFiltroLayout = new javax.swing.GroupLayout(contenedorFiltro);
        contenedorFiltro.setLayout(contenedorFiltroLayout);
        contenedorFiltroLayout.setHorizontalGroup(
            contenedorFiltroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contenedorFiltroLayout.createSequentialGroup()
                .addComponent(contenedorFiltroInterno, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 187, Short.MAX_VALUE))
        );
        contenedorFiltroLayout.setVerticalGroup(
            contenedorFiltroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(contenedorFiltroInterno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        panelHerramientas.add(contenedorFiltro);

        contenedorContraste.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        contenedorContrasteBotones.setLayout(new java.awt.GridLayout(1, 3));

        buttonGroupBotonesContraste.add(botonContrasteNormal);
        botonContrasteNormal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/contraste.png"))); // NOI18N
        botonContrasteNormal.setToolTipText("normal");
        botonContrasteNormal.addActionListener(formListener);
        contenedorContrasteBotones.add(botonContrasteNormal);

        buttonGroupBotonesContraste.add(botonContrasteIluminacion);
        botonContrasteIluminacion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/iluminar.png"))); // NOI18N
        botonContrasteIluminacion.setToolTipText("iluminar");
        botonContrasteIluminacion.addActionListener(formListener);
        contenedorContrasteBotones.add(botonContrasteIluminacion);

        buttonGroupBotonesContraste.add(botonContrasteOscurecimiento);
        botonContrasteOscurecimiento.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/oscurecer.png"))); // NOI18N
        botonContrasteOscurecimiento.setToolTipText("oscurecer");
        botonContrasteOscurecimiento.addActionListener(formListener);
        contenedorContrasteBotones.add(botonContrasteOscurecimiento);

        javax.swing.GroupLayout contenedorContrasteLayout = new javax.swing.GroupLayout(contenedorContraste);
        contenedorContraste.setLayout(contenedorContrasteLayout);
        contenedorContrasteLayout.setHorizontalGroup(
            contenedorContrasteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contenedorContrasteLayout.createSequentialGroup()
                .addComponent(contenedorContrasteBotones, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(187, Short.MAX_VALUE))
        );
        contenedorContrasteLayout.setVerticalGroup(
            contenedorContrasteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(contenedorContrasteBotones, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        panelHerramientas.add(contenedorContraste);

        contenedorRotacion.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        contenedorBotonesRotacion.setLayout(new java.awt.GridLayout(1, 0));

        jSliderRotacion.setMaximum(360);
        jSliderRotacion.setPaintTicks(true);
        jSliderRotacion.setToolTipText("Rango Rotación");
        jSliderRotacion.setValue(0);
        jSliderRotacion.addChangeListener(formListener);
        jSliderRotacion.addFocusListener(formListener);
        contenedorBotonesRotacion.add(jSliderRotacion);

        buttonGroupRotacion.add(botonRotacion90);
        botonRotacion90.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/rotacion90.png"))); // NOI18N
        botonRotacion90.setToolTipText("rotar 90 %");
        botonRotacion90.addActionListener(formListener);

        buttonGroupRotacion.add(botonRotacion180);
        botonRotacion180.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/rotacion180.png"))); // NOI18N
        botonRotacion180.setToolTipText("rotar 180 %");
        botonRotacion180.addActionListener(formListener);

        buttonGroupRotacion.add(botonRotacion270);
        botonRotacion270.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/rotacion270.png"))); // NOI18N
        botonRotacion270.setToolTipText("rotar 270 %");
        botonRotacion270.addActionListener(formListener);

        javax.swing.GroupLayout contenedorBotonesRotacion2Layout = new javax.swing.GroupLayout(contenedorBotonesRotacion2);
        contenedorBotonesRotacion2.setLayout(contenedorBotonesRotacion2Layout);
        contenedorBotonesRotacion2Layout.setHorizontalGroup(
            contenedorBotonesRotacion2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contenedorBotonesRotacion2Layout.createSequentialGroup()
                .addComponent(botonRotacion90, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(botonRotacion180, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(botonRotacion270, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        contenedorBotonesRotacion2Layout.setVerticalGroup(
            contenedorBotonesRotacion2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(botonRotacion90, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(botonRotacion180, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(botonRotacion270, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        contenedorBotonesRotacion.add(contenedorBotonesRotacion2);

        javax.swing.GroupLayout contenedorRotacionLayout = new javax.swing.GroupLayout(contenedorRotacion);
        contenedorRotacion.setLayout(contenedorRotacionLayout);
        contenedorRotacionLayout.setHorizontalGroup(
            contenedorRotacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(contenedorBotonesRotacion, javax.swing.GroupLayout.DEFAULT_SIZE, 292, Short.MAX_VALUE)
        );
        contenedorRotacionLayout.setVerticalGroup(
            contenedorRotacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(contenedorBotonesRotacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        panelHerramientas.add(contenedorRotacion);

        contenedorSeno.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        contenedorSeno.setToolTipText("Aplicar funcion Seno");

        contenedorBotonSeno.setLayout(new java.awt.GridLayout(1, 0));

        botonNegativo.setText("negativo");
        botonNegativo.setToolTipText("aplicar negativo");
        botonNegativo.addActionListener(formListener);
        contenedorBotonSeno.add(botonNegativo);

        botonSeno.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/sinusoidal.png"))); // NOI18N
        botonSeno.setToolTipText("función sinusoidal");
        botonSeno.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        botonSeno.addActionListener(formListener);
        contenedorBotonSeno.add(botonSeno);

        botonGrises.setText("niveles gris");
        botonGrises.addActionListener(formListener);
        contenedorBotonSeno.add(botonGrises);

        javax.swing.GroupLayout contenedorSenoLayout = new javax.swing.GroupLayout(contenedorSeno);
        contenedorSeno.setLayout(contenedorSenoLayout);
        contenedorSenoLayout.setHorizontalGroup(
            contenedorSenoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contenedorSenoLayout.createSequentialGroup()
                .addComponent(contenedorBotonSeno, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 3, Short.MAX_VALUE))
        );
        contenedorSenoLayout.setVerticalGroup(
            contenedorSenoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(contenedorBotonSeno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        panelHerramientas.add(contenedorSeno);

        contenedorEscala.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        contenedorBotonesZoom.setLayout(new java.awt.GridLayout(1, 0));

        buttonGroupEscalar.add(botonEscalaAumentar);
        botonEscalaAumentar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/aumentar.png"))); // NOI18N
        botonEscalaAumentar.setToolTipText("aumentar imagen");
        botonEscalaAumentar.addMouseListener(formListener);
        botonEscalaAumentar.addActionListener(formListener);
        contenedorBotonesZoom.add(botonEscalaAumentar);

        buttonGroupEscalar.add(botonEscalaDisminuir);
        botonEscalaDisminuir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/disminuir.png"))); // NOI18N
        botonEscalaDisminuir.setToolTipText("disminuir imagen");
        botonEscalaDisminuir.addActionListener(formListener);
        contenedorBotonesZoom.add(botonEscalaDisminuir);

        javax.swing.GroupLayout contenedorEscalaLayout = new javax.swing.GroupLayout(contenedorEscala);
        contenedorEscala.setLayout(contenedorEscalaLayout);
        contenedorEscalaLayout.setHorizontalGroup(
            contenedorEscalaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contenedorEscalaLayout.createSequentialGroup()
                .addComponent(contenedorBotonesZoom, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 212, Short.MAX_VALUE))
        );
        contenedorEscalaLayout.setVerticalGroup(
            contenedorEscalaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(contenedorBotonesZoom, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        panelHerramientas.add(contenedorEscala);

        contenedorBrillo.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        contenedorBrilloInterno.setLayout(new java.awt.GridLayout(1, 0));

        etiqBrillo.setText("Brillo");
        contenedorBrilloInterno.add(etiqBrillo);

        jSliderBrillo.setMaximum(255);
        jSliderBrillo.setMinimum(-255);
        jSliderBrillo.setToolTipText("rango brillo");
        jSliderBrillo.setValue(0);
        jSliderBrillo.addChangeListener(formListener);
        jSliderBrillo.addFocusListener(formListener);

        javax.swing.GroupLayout contenedorBrilloLayout = new javax.swing.GroupLayout(contenedorBrillo);
        contenedorBrillo.setLayout(contenedorBrilloLayout);
        contenedorBrilloLayout.setHorizontalGroup(
            contenedorBrilloLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(contenedorBrilloInterno, javax.swing.GroupLayout.DEFAULT_SIZE, 292, Short.MAX_VALUE)
            .addGroup(contenedorBrilloLayout.createSequentialGroup()
                .addComponent(jSliderBrillo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        contenedorBrilloLayout.setVerticalGroup(
            contenedorBrilloLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contenedorBrilloLayout.createSequentialGroup()
                .addComponent(contenedorBrilloInterno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jSliderBrillo, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27))
        );

        panelHerramientas.add(contenedorBrillo);

        contenedorInterno_Esq_linea.setLayout(new java.awt.GridLayout(1, 0));

        jLabel1.setText("Transparencia figuras");
        contenedorInterno_Esq_linea.add(jLabel1);

        sliderRR_LC.setMaximum(10);
        sliderRR_LC.setToolTipText("transparencia");
        sliderRR_LC.setValue(0);
        sliderRR_LC.addChangeListener(formListener);

        javax.swing.GroupLayout contenedorEsq_lineaLayout = new javax.swing.GroupLayout(contenedorEsq_linea);
        contenedorEsq_linea.setLayout(contenedorEsq_lineaLayout);
        contenedorEsq_lineaLayout.setHorizontalGroup(
            contenedorEsq_lineaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contenedorEsq_lineaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(contenedorInterno_Esq_linea, javax.swing.GroupLayout.DEFAULT_SIZE, 288, Short.MAX_VALUE))
            .addComponent(sliderRR_LC, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        contenedorEsq_lineaLayout.setVerticalGroup(
            contenedorEsq_lineaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, contenedorEsq_lineaLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(contenedorInterno_Esq_linea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sliderRR_LC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        panelHerramientas.add(contenedorEsq_linea);

        contenedorUmbralizacion.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        contenedorUmbralizacionInterno.setLayout(new java.awt.GridLayout(1, 0));

        etiqUmbralizacion.setText("Umbralización");
        contenedorUmbralizacionInterno.add(etiqUmbralizacion);

        jSliderUmbralizacion.setMaximum(256);
        jSliderUmbralizacion.setToolTipText("rango umbralización");
        jSliderUmbralizacion.setValue(0);
        jSliderUmbralizacion.addChangeListener(formListener);
        jSliderUmbralizacion.addFocusListener(formListener);

        javax.swing.GroupLayout contenedorUmbralizacionLayout = new javax.swing.GroupLayout(contenedorUmbralizacion);
        contenedorUmbralizacion.setLayout(contenedorUmbralizacionLayout);
        contenedorUmbralizacionLayout.setHorizontalGroup(
            contenedorUmbralizacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(contenedorUmbralizacionInterno, javax.swing.GroupLayout.DEFAULT_SIZE, 292, Short.MAX_VALUE)
            .addComponent(jSliderUmbralizacion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        contenedorUmbralizacionLayout.setVerticalGroup(
            contenedorUmbralizacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contenedorUmbralizacionLayout.createSequentialGroup()
                .addComponent(contenedorUmbralizacionInterno, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jSliderUmbralizacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        panelHerramientas.add(contenedorUmbralizacion);

        contenedorBinarias.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        contenedorBotonesBinarias.setLayout(new java.awt.GridLayout(1, 0));

        botonSumaBinario.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/suma.png"))); // NOI18N
        botonSumaBinario.setToolTipText("Suma");
        botonSumaBinario.addActionListener(formListener);
        contenedorBotonesBinarias.add(botonSumaBinario);

        botonRestaBinaria.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/resta.png"))); // NOI18N
        botonRestaBinaria.setToolTipText("Resta");
        botonRestaBinaria.addActionListener(formListener);
        contenedorBotonesBinarias.add(botonRestaBinaria);

        javax.swing.GroupLayout contenedorBinariasLayout = new javax.swing.GroupLayout(contenedorBinarias);
        contenedorBinarias.setLayout(contenedorBinariasLayout);
        contenedorBinariasLayout.setHorizontalGroup(
            contenedorBinariasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contenedorBinariasLayout.createSequentialGroup()
                .addComponent(contenedorBotonesBinarias, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 217, Short.MAX_VALUE))
        );
        contenedorBinariasLayout.setVerticalGroup(
            contenedorBinariasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contenedorBinariasLayout.createSequentialGroup()
                .addComponent(contenedorBotonesBinarias, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 182, Short.MAX_VALUE))
        );

        panelHerramientas.add(contenedorBinarias);

        contenedorEscritorio.add(panelHerramientas, java.awt.BorderLayout.WEST);

        javax.swing.GroupLayout escritorioLayout = new javax.swing.GroupLayout(escritorio);
        escritorio.setLayout(escritorioLayout);
        escritorioLayout.setHorizontalGroup(
            escritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 3766, Short.MAX_VALUE)
        );
        escritorioLayout.setVerticalGroup(
            escritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 676, Short.MAX_VALUE)
        );

        contenedorEscritorio.add(escritorio, java.awt.BorderLayout.CENTER);

        getContentPane().add(contenedorEscritorio, java.awt.BorderLayout.CENTER);

        panelBarraTrabajo.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, null, null, null, new java.awt.Color(153, 153, 153)));
        panelBarraTrabajo.setLayout(new java.awt.BorderLayout());

        panelBarraNotificacion.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        panelBarraNotificacion.setLayout(new java.awt.BorderLayout());

        barraNotificacion.setText("  ");
        panelBarraNotificacion.add(barraNotificacion, java.awt.BorderLayout.NORTH);

        panelBarraTrabajo.add(panelBarraNotificacion, java.awt.BorderLayout.SOUTH);

        getContentPane().add(panelBarraTrabajo, java.awt.BorderLayout.SOUTH);

        archivo.setText("Archivo");

        Nuevo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        Nuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/nuevo.png"))); // NOI18N
        Nuevo.setText("Nuevo");
        Nuevo.addActionListener(formListener);
        archivo.add(Nuevo);

        abrirArchivo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        abrirArchivo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/abrir.png"))); // NOI18N
        abrirArchivo.setText("Abrir");
        abrirArchivo.addActionListener(formListener);
        archivo.add(abrirArchivo);

        guardarArchivo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        guardarArchivo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/guardar.png"))); // NOI18N
        guardarArchivo.setText("Guardar");
        guardarArchivo.addActionListener(formListener);
        archivo.add(guardarArchivo);

        abrirArchivoAudio.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.ALT_MASK));
        abrirArchivoAudio.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/openAudio24x24.png"))); // NOI18N
        abrirArchivoAudio.setText("Abrir Audio");
        abrirArchivoAudio.setToolTipText("Abrir archivo  de audio");
        abrirArchivoAudio.addActionListener(formListener);
        archivo.add(abrirArchivoAudio);

        grabarArchivoAudio.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.ALT_MASK));
        grabarArchivoAudio.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/record24x24.png"))); // NOI18N
        grabarArchivoAudio.setText("Guardar Audio");
        grabarArchivoAudio.setToolTipText("Guardar archivo audio");
        grabarArchivoAudio.addActionListener(formListener);
        archivo.add(grabarArchivoAudio);

        abrirAudioVideo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.ALT_MASK));
        abrirAudioVideo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/AbrirMedio.png"))); // NOI18N
        abrirAudioVideo.setText("Abrir Audio/Video");
        abrirAudioVideo.addActionListener(formListener);
        archivo.add(abrirAudioVideo);

        jMenuBar2.add(archivo);

        Edicion.setText("Ver");

        BarraEstado.setSelected(true);
        BarraEstado.setText("Ver barra de estado");
        BarraEstado.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        BarraEstado.addActionListener(formListener);
        Edicion.add(BarraEstado);

        barraFormas.setSelected(true);
        barraFormas.setText("Ver barra de formas");
        barraFormas.addActionListener(formListener);
        Edicion.add(barraFormas);

        barraAtributos.setSelected(true);
        barraAtributos.setText("Ver barras de atributos");
        barraAtributos.addActionListener(formListener);
        Edicion.add(barraAtributos);

        verPanelHerramientas.setSelected(true);
        verPanelHerramientas.setText("Ver panel de herramientas");
        verPanelHerramientas.addActionListener(formListener);
        Edicion.add(verPanelHerramientas);

        jMenuBar2.add(Edicion);

        setJMenuBar(jMenuBar2);

        pack();
    }

    // Code for dispatching events from components to event handlers.

    private class FormListener implements java.awt.event.ActionListener, java.awt.event.FocusListener, java.awt.event.MouseListener, javax.swing.event.ChangeListener {
        FormListener() {}
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            if (evt.getSource() == botonNuevo) {
                VentanaPaint.this.botonNuevoActionPerformed(evt);
            }
            else if (evt.getSource() == botonAbrir) {
                VentanaPaint.this.botonAbrirActionPerformed(evt);
            }
            else if (evt.getSource() == botonGuardar) {
                VentanaPaint.this.botonGuardarActionPerformed(evt);
            }
            else if (evt.getSource() == botonClon) {
                VentanaPaint.this.botonClonActionPerformed(evt);
            }
            else if (evt.getSource() == listaColores) {
                VentanaPaint.this.listaColoresActionPerformed(evt);
            }
            else if (evt.getSource() == botonRellenar) {
                VentanaPaint.this.botonRellenarActionPerformed(evt);
            }
            else if (evt.getSource() == botonTransparencia) {
                VentanaPaint.this.botonTransparenciaActionPerformed(evt);
            }
            else if (evt.getSource() == botonAlisar) {
                VentanaPaint.this.botonAlisarActionPerformed(evt);
            }
            else if (evt.getSource() == listaTrazo) {
                VentanaPaint.this.listaTrazoActionPerformed(evt);
            }
            else if (evt.getSource() == listaDegradado) {
                VentanaPaint.this.listaDegradadoActionPerformed(evt);
            }
            else if (evt.getSource() == jComboBoxFiltro) {
                VentanaPaint.this.jComboBoxFiltroActionPerformed(evt);
            }
            else if (evt.getSource() == botonContrasteNormal) {
                VentanaPaint.this.botonContrasteNormalActionPerformed(evt);
            }
            else if (evt.getSource() == botonContrasteIluminacion) {
                VentanaPaint.this.botonContrasteIluminacionActionPerformed(evt);
            }
            else if (evt.getSource() == botonContrasteOscurecimiento) {
                VentanaPaint.this.botonContrasteOscurecimientoActionPerformed(evt);
            }
            else if (evt.getSource() == botonRotacion90) {
                VentanaPaint.this.botonRotacion90ActionPerformed(evt);
            }
            else if (evt.getSource() == botonRotacion180) {
                VentanaPaint.this.botonRotacion180ActionPerformed(evt);
            }
            else if (evt.getSource() == botonRotacion270) {
                VentanaPaint.this.botonRotacion270ActionPerformed(evt);
            }
            else if (evt.getSource() == botonNegativo) {
                VentanaPaint.this.botonNegativoActionPerformed(evt);
            }
            else if (evt.getSource() == botonSeno) {
                VentanaPaint.this.botonSenoActionPerformed(evt);
            }
            else if (evt.getSource() == botonGrises) {
                VentanaPaint.this.botonGrisesActionPerformed(evt);
            }
            else if (evt.getSource() == botonEscalaAumentar) {
                VentanaPaint.this.botonEscalaAumentarActionPerformed(evt);
            }
            else if (evt.getSource() == botonEscalaDisminuir) {
                VentanaPaint.this.botonEscalaDisminuirActionPerformed(evt);
            }
            else if (evt.getSource() == botonSumaBinario) {
                VentanaPaint.this.botonSumaBinarioActionPerformed(evt);
            }
            else if (evt.getSource() == botonRestaBinaria) {
                VentanaPaint.this.botonRestaBinariaActionPerformed(evt);
            }
            else if (evt.getSource() == Nuevo) {
                VentanaPaint.this.NuevoActionPerformed(evt);
            }
            else if (evt.getSource() == abrirArchivo) {
                VentanaPaint.this.abrirArchivoActionPerformed(evt);
            }
            else if (evt.getSource() == guardarArchivo) {
                VentanaPaint.this.guardarArchivoActionPerformed(evt);
            }
            else if (evt.getSource() == abrirArchivoAudio) {
                VentanaPaint.this.abrirArchivoAudioActionPerformed(evt);
            }
            else if (evt.getSource() == grabarArchivoAudio) {
                VentanaPaint.this.grabarArchivoAudioActionPerformed(evt);
            }
            else if (evt.getSource() == abrirAudioVideo) {
                VentanaPaint.this.abrirAudioVideoActionPerformed(evt);
            }
            else if (evt.getSource() == BarraEstado) {
                VentanaPaint.this.BarraEstadoActionPerformed(evt);
            }
            else if (evt.getSource() == barraFormas) {
                VentanaPaint.this.barraFormasActionPerformed(evt);
            }
            else if (evt.getSource() == barraAtributos) {
                VentanaPaint.this.barraAtributosActionPerformed(evt);
            }
            else if (evt.getSource() == verPanelHerramientas) {
                VentanaPaint.this.verPanelHerramientasActionPerformed(evt);
            }
        }

        public void focusGained(java.awt.event.FocusEvent evt) {
            if (evt.getSource() == jSliderRotacion) {
                VentanaPaint.this.jSliderRotacionFocusGained(evt);
            }
            else if (evt.getSource() == jSliderBrillo) {
                VentanaPaint.this.jSliderBrilloFocusGained(evt);
            }
            else if (evt.getSource() == jSliderUmbralizacion) {
                VentanaPaint.this.jSliderUmbralizacionFocusGained(evt);
            }
        }

        public void focusLost(java.awt.event.FocusEvent evt) {
            if (evt.getSource() == jSliderRotacion) {
                VentanaPaint.this.jSliderRotacionFocusLost(evt);
            }
            else if (evt.getSource() == jSliderBrillo) {
                VentanaPaint.this.jSliderBrilloFocusLost(evt);
            }
            else if (evt.getSource() == jSliderUmbralizacion) {
                VentanaPaint.this.jSliderUmbralizacionFocusLost(evt);
            }
        }

        public void mouseClicked(java.awt.event.MouseEvent evt) {
            if (evt.getSource() == botonDibujarPunto) {
                VentanaPaint.this.botonDibujarPuntoMouseClicked(evt);
            }
            else if (evt.getSource() == botonDibujarLinea) {
                VentanaPaint.this.botonDibujarLineaMouseClicked(evt);
            }
            else if (evt.getSource() == botonDibujarCuadrado) {
                VentanaPaint.this.botonDibujarCuadradoMouseClicked(evt);
            }
            else if (evt.getSource() == botonDibujarRecRedondo) {
                VentanaPaint.this.botonDibujarRecRedondoMouseClicked(evt);
            }
            else if (evt.getSource() == botonLineaCurva) {
                VentanaPaint.this.botonLineaCurvaMouseClicked(evt);
            }
            else if (evt.getSource() == botonDibujarElipse) {
                VentanaPaint.this.botonDibujarElipseMouseClicked(evt);
            }
        }

        public void mouseEntered(java.awt.event.MouseEvent evt) {
        }

        public void mouseExited(java.awt.event.MouseEvent evt) {
        }

        public void mousePressed(java.awt.event.MouseEvent evt) {
        }

        public void mouseReleased(java.awt.event.MouseEvent evt) {
            if (evt.getSource() == botonEscalaAumentar) {
                VentanaPaint.this.botonEscalaAumentarMouseReleased(evt);
            }
        }

        public void stateChanged(javax.swing.event.ChangeEvent evt) {
            if (evt.getSource() == botonEditar) {
                VentanaPaint.this.botonEditarStateChanged(evt);
            }
            else if (evt.getSource() == listaGrosor) {
                VentanaPaint.this.listaGrosorStateChanged(evt);
            }
            else if (evt.getSource() == jSliderRotacion) {
                VentanaPaint.this.jSliderRotacionStateChanged(evt);
            }
            else if (evt.getSource() == jSliderBrillo) {
                VentanaPaint.this.jSliderBrilloStateChanged(evt);
            }
            else if (evt.getSource() == sliderRR_LC) {
                VentanaPaint.this.sliderRR_LCStateChanged(evt);
            }
            else if (evt.getSource() == jSliderUmbralizacion) {
                VentanaPaint.this.jSliderUmbralizacionStateChanged(evt);
            }
        }
    }// </editor-fold>//GEN-END:initComponents
/**
 * manejador de evento que gestiona guardar un archivo 
 * @param evt 
 */
    private void guardarArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarArchivoActionPerformed
   // TODO add your handling code here:
    //cerrar el popupMenu 
    VentanaInterna vi=(VentanaInterna) escritorio.getSelectedFrame();
        if (vi != null) {
            archivo.setPopupMenuVisible(false);
            archivo.setSelected(false);
            JFileChooser dlg = new JFileChooser();
            
            // lista de los formatos de lectura suportados
            //String[] readerFormatNames = ImageIO.getReaderFormatNames();
            //lista de los formatos de escritura soportados
            String[] writerFormatNames=ImageIO.getWriterFormatNames();
            
            StringBuffer cadena=new  StringBuffer();
            for (int x=0;x<writerFormatNames.length;x++){
                
                cadena =cadena.append(writerFormatNames[x]);
                cadena=cadena.append(" , ");
            }
           
            //añadir filtros (opcional)
           // FileFilter filter=new FileNameExtensionFilter("Imagenes [jpg,jpeg,bmp,gif,wbmp] ", "jpg", "jpeg","bmp","gif","wbmp");
              FileFilter filter=new FileNameExtensionFilter("Imagenes "+cadena, writerFormatNames);
             

            dlg.addChoosableFileFilter(filter);
            
            
            int resp = dlg.showSaveDialog(this);
            if( resp == JFileChooser.APPROVE_OPTION) {
                try {
                      BufferedImage img = vi.getLienzo().getImage(true);
                      if (img != null) {
                        File f = dlg.getSelectedFile();
                       
                        if(!filter.accept(f)){
                            JOptionPane.showMessageDialog(this,"Formato no soportado");
                        }else{
                            //obtenemos la extension Ej : .png
                            String filename=dlg.getSelectedFile().getName();
                            String fileExtension=filename.substring(filename.lastIndexOf("."),filename.length());
                            //eliminamos el punto inicial de la extension Ej: png
                            fileExtension=fileExtension.substring(1);
                            //System.out.print(" Extension : "+fileExtension);
                            ImageIO.write(img,fileExtension, f);
                        }
                        
                        vi.setTitle(f.getName());
                        }
                    }catch (Exception ex) {
                      System.err.println("Error al guardar la imagen");
                    }
            }
        } 
        
    }//GEN-LAST:event_guardarArchivoActionPerformed
/**
 * manejador de evento que gestiona la accion de dibujar una linea
 * @param evt 
 */
    private void botonDibujarLineaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botonDibujarLineaMouseClicked
        // TODO add your handling code here:
        //aceso al VentanaInterna activa
        VentanaInterna vi;
        vi = (VentanaInterna)escritorio.getSelectedFrame();
        //aceso a lienzo
        if(vi!=null){
            vi.getLienzo().setForma(1);
            barraNotificacion.setText("Linea");
        }
    }//GEN-LAST:event_botonDibujarLineaMouseClicked
   
    /**
     * manejador de evento que gestiona la accion de dibujar una cuadrado
     * @param evt 
     */
    private void botonDibujarCuadradoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botonDibujarCuadradoMouseClicked
        // TODO add your handling code here:
        VentanaInterna vi;
        vi=(VentanaInterna)escritorio.getSelectedFrame();
       
        //acceso a linzo
        if(vi!=null){
            vi.getLienzo().setForma(2);
            barraNotificacion.setText("Cuadrado");
        }
    }//GEN-LAST:event_botonDibujarCuadradoMouseClicked
/**
 * manejador de evento que gestiona la accion de dibujar una elipse
 * @param evt 
 */
    private void botonDibujarElipseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botonDibujarElipseMouseClicked
        // TODO add your handling code here:
        VentanaInterna vi;
        vi=(VentanaInterna)escritorio.getSelectedFrame();
        //acceso a linzo
        if(vi!=null){
            vi.getLienzo().setForma(3);
            barraNotificacion.setText("Elipse");
        }
    }//GEN-LAST:event_botonDibujarElipseMouseClicked

    /**
     * manejador de evento que gestiona la accion de dibujar un punto
     * @param evt 
     */
    private void botonDibujarPuntoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botonDibujarPuntoMouseClicked
        // TODO add your handling code here:
        VentanaInterna vi;
        vi=(VentanaInterna)escritorio.getSelectedFrame();
        //vi.setAtributos();
        //acceso a linzo
        if(vi!=null){
            vi.getLienzo().setForma(0);
            //vi.getLienzo().setDibujarPunto(true);
            barraNotificacion.setText("Punto");
        }
    }//GEN-LAST:event_botonDibujarPuntoMouseClicked
    
    /** 
     * metodo para convertir una imagen a otro tipo
     * @param img 
     * @param type
     * @return imgOut
     */
    /*
    BufferedImage convertImageType(BufferedImage img,int type){
        if(img==null)return null;
        BufferedImage imgOut = new BufferedImage(img.getWidth(),img.getHeight(),type);
        Graphics2D g2d =imgOut.createGraphics();
        g2d.drawImage(img,0,0, null);
        return imgOut;
    }
    */
    /**
     * manejador de evento que gestiona la accion de abrir una imagen
     * @param evt 
     */
    private void abrirArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirArchivoActionPerformed
    // TODO add your handling code here:
    //cerrar el popupMenu
    archivo.setPopupMenuVisible(false);
    archivo.setSelected(false);
    JFileChooser dlg = new JFileChooser();
    
    //que formatos permite leer
    String[] readerFormatNames=ImageIO.getReaderFormatNames();
            
    StringBuffer cadena=new  StringBuffer();
        for (String readerFormatName : readerFormatNames) {
            cadena = cadena.append(readerFormatName);
            cadena=cadena.append(" , ");
        }
           
    //añadir filtros (opcional)
    FileFilter filter=new FileNameExtensionFilter("Imagenes "+cadena, readerFormatNames);

    
    dlg.addChoosableFileFilter(filter);
    
    int resp = dlg.showOpenDialog(this);
        if( resp == JFileChooser.APPROVE_OPTION) {
            try{
                   File f = dlg.getSelectedFile();
                   if(!filter.accept(f))
                   {
                        JOptionPane.showMessageDialog(this,"Formato no soportado");
                   }else{
                        BufferedImage img = ImageIO.read(f);
                        VentanaInterna vi = new VentanaInterna();
                        vi.getLienzo().setImage(img);
                        this.escritorio.add(vi);
                        vi.setTitle(f.getName());
                        vi.setVisible(true);
                   }
                }catch(HeadlessException | IOException ex){
                  System.err.println("Error al leer la imagen");
                }
        }
    }//GEN-LAST:event_abrirArchivoActionPerformed
/**
 * manejador de evento que gestion la barra de estado del programa
 * @param evt 
 */
    private void BarraEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BarraEstadoActionPerformed
        // TODO add your handling code here:
        if(BarraEstado.isSelected()){
            panelBarraNotificacion.setVisible(true);
        }else{
            panelBarraNotificacion.setVisible(false);
        }
    }//GEN-LAST:event_BarraEstadoActionPerformed
/**
 * manejador de evento que gestiona el grosor del trazo
 * @param evt 
 */
    private void listaGrosorStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_listaGrosorStateChanged
        // TODO add your handling code here:
        VentanaInterna vi=(VentanaInterna)escritorio.getSelectedFrame();
        //acceso al frame activo
        if(vi!=null){//comprobar que hay lienzo para pintar
            float grosor=(float)listaGrosor.getValue();
            if(vi.getLienzo().getFiguraSeleccionada()!=null){
                //actualizamos el grosor  
                //vi.getLienzo().setGrosorPunto(grosor);
                //BasicStroke stroke=new BasicStroke(grosor);
                vi.getLienzo().getFiguraSeleccionada().setAltura((int) grosor);
                vi.getLienzo().getFiguraSeleccionada().setAnchura((int) grosor);
               // vi.getLienzo().getFiguraSeleccionada().setGrosorTrazo((int) grosor);
               
                //System.out.println("");
                vi.getLienzo().repaint();
            }else{
                //System.out.println("figura seleccionada null en setTrazo");
            }
        }
        if(vi!=null)
            vi.getLienzo().repaint();
        //else
            //System.out.println("vi es null en lista GrosorState change");
    }//GEN-LAST:event_listaGrosorStateChanged
/**
 * manejador de evento que gestiona la creacion de una nueva ventana
 * @param evt 
 */
    private void NuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NuevoActionPerformed
        crearNuevaImagen();
    }//GEN-LAST:event_NuevoActionPerformed
/**
 * manejador de evento que controla la visibilidad de los botones de  las forma 
 * @param evt 
 */
    private void barraFormasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_barraFormasActionPerformed
        // TODO add your handling code here:
          // TODO add your handling code here:
        if(barraFormas.isSelected()){
            //barraNavegacion.setVisible(true);
            botonDibujarPunto.setVisible(true);
            botonDibujarLinea.setVisible(true);
            botonDibujarCuadrado.setVisible(true);
            botonDibujarElipse.setVisible(true);
            botonEditar.setVisible(true);
        }else{
            botonDibujarPunto.setVisible(false);
            botonDibujarLinea.setVisible(false);
            botonDibujarCuadrado.setVisible(false);
            botonDibujarElipse.setVisible(false);
            botonEditar.setVisible(false);
            separadorFormas.setVisible(false);
        }
        
    }//GEN-LAST:event_barraFormasActionPerformed
/**
 * manejador de evento que controla la visibilidad de la barra de atributos
 * @param evt 
 */
    private void barraAtributosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_barraAtributosActionPerformed
        // TODO add your handling code here:
        if(barraAtributos.isSelected()){           
            listaColores.setVisible(true);
            listaGrosor.setVisible(true);
            botonRellenar.setVisible(true);
            botonTransparencia.setVisible(true);
            botonAlisar.setVisible(true);
        }else{
            listaColores.setVisible(false);
            listaGrosor.setVisible(false);
            botonRellenar.setVisible(false);
            botonTransparencia.setVisible(false);
            botonAlisar.setVisible(false);
            separadorAtributos.setVisible(false);
            separadorColores.setVisible(false);
        }
    }//GEN-LAST:event_barraAtributosActionPerformed
/**
 * manejador de evento que gestion la accion de lboton contraste normal
 * @param evt 
 */
    private void botonContrasteNormalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonContrasteNormalActionPerformed
       VentanaInterna vi =(VentanaInterna)(escritorio.getSelectedFrame());
       if (vi !=null){
           BufferedImage imgSource=vi.getLienzo().getImage();
           if(imgSource!=null){
               try{
                   int type =LookupTableProducer.TYPE_SFUNCION;
                   LookupTable it=LookupTableProducer.createLookupTable(type);
                   LookupOp lop=new LookupOp(it,null);
                   //Imagenorigen y destino iguales
                   lop.filter(imgSource,imgSource);
                   vi.repaint();
               }catch(IllegalArgumentException e){
                   System.err.println(e.getLocalizedMessage());
               }
           }
       }
    }//GEN-LAST:event_botonContrasteNormalActionPerformed
/**
 * manejador de evento que gestion la accion de lboton contraste iluminar
 * @param evt 
 */
    private void botonContrasteIluminacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonContrasteIluminacionActionPerformed
        // TODO add your handling code here:
               VentanaInterna vi =(VentanaInterna)(escritorio.getSelectedFrame());
       if (vi !=null){
           BufferedImage imgSource=vi.getLienzo().getImage();
           if(imgSource!=null){
               try{
                   int type =LookupTableProducer.TYPE_LOGARITHM;
                   LookupTable it=LookupTableProducer.createLookupTable(type);
                   LookupOp lop=new LookupOp(it,null);
                   //Imagenorigen y destino iguales
                   lop.filter(imgSource,imgSource);
                   vi.repaint();
               }catch(IllegalArgumentException e){
                   System.err.println(e.getLocalizedMessage());
               }
           }
       }
    }//GEN-LAST:event_botonContrasteIluminacionActionPerformed
/**
 * manejador de evento que gestion la accion de lboton contraste oscurecer
 * @param evt 
 */
    private void botonContrasteOscurecimientoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonContrasteOscurecimientoActionPerformed
        // TODO add your handling code here:
                // TODO add your handling code here:
               VentanaInterna vi =(VentanaInterna)(escritorio.getSelectedFrame());
       if (vi !=null){
           BufferedImage imgSource=vi.getLienzo().getImage();
           if(imgSource!=null){
               try{
                   int type =LookupTableProducer.TYPE_POWER;
                   LookupTable it=LookupTableProducer.createLookupTable(type);
                   LookupOp lop=new LookupOp(it,null);
                   //Imagenorigen y destino iguales
                   lop.filter(imgSource,imgSource);
                   vi.repaint();
               }catch(IllegalArgumentException e){
                   System.err.println(e.getLocalizedMessage());
               }
           }
       }
    }//GEN-LAST:event_botonContrasteOscurecimientoActionPerformed
/**
 * manejador de evento que gestion la accion rotar la imagen 90 grados
 * @param evt 
 */
    private void botonRotacion90ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonRotacion90ActionPerformed
        // TODO add your handling code here:
                // TODO add your handling code here:
        BufferedImage imgSource;
        BufferedImage imgdest;
         //aceso al VentanaInterna activa
        
        VentanaInterna vi;
        vi = (VentanaInterna)escritorio.getSelectedFrame();
        imgSource=vi.getLienzo().getImage();
        imgdest=new BufferedImage(imgSource.getWidth(),imgSource.getHeight(),BufferedImage.TYPE_INT_ARGB);
        double r = Math.toRadians(90);
        Point c = new Point(imgSource.getWidth()/2, imgSource.getHeight()/2);
        AffineTransform at = AffineTransform.getRotateInstance(r,c.x,c.y);
        AffineTransformOp atop;
        atop = new AffineTransformOp(at,AffineTransformOp.TYPE_BILINEAR);
        atop.filter(imgSource, imgdest);
        vi.getLienzo().setImage(imgdest);
        vi.getLienzo().repaint();
    }//GEN-LAST:event_botonRotacion90ActionPerformed
/**
 * manejador de evento que gestion la accion rotar la imagen 270 grados
 * @param evt 
 */
    private void botonRotacion270ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonRotacion270ActionPerformed
        // TODO add your handling code here:
                // TODO add your handling code here:
                // TODO add your handling code here:
        BufferedImage imgSource;
        BufferedImage imgdest;
         //aceso al VentanaInterna activa
        
        VentanaInterna vi;
        vi = (VentanaInterna)escritorio.getSelectedFrame();
        imgSource=vi.getLienzo().getImage();
        imgdest=new BufferedImage(imgSource.getWidth(),imgSource.getHeight(),BufferedImage.TYPE_INT_ARGB);
        double r = Math.toRadians(270);
        Point c = new Point(imgSource.getWidth()/2, imgSource.getHeight()/2);
        AffineTransform at = AffineTransform.getRotateInstance(r,c.x,c.y);
        AffineTransformOp atop;
        atop = new AffineTransformOp(at,AffineTransformOp.TYPE_BILINEAR);
        atop.filter(imgSource, imgdest);
        vi.getLienzo().setImage(imgdest);
        vi.getLienzo().repaint();
    }//GEN-LAST:event_botonRotacion270ActionPerformed

    /**
     * metodo que crea la funcion seno
     * @param w recibe la velocidad angular
     * @return  devuelve LookupTable
     */
    public LookupTable seno(double w){
        double k=255.0;//cte de normalización
        byte lt[]=new byte[256];
        for(int i=1; i<256;i++){
            lt[i]=(byte) (k*(abs(Math.sin(Math.toRadians(w*i)))));
          
        }
        ByteLookupTable mitabla=new ByteLookupTable(0,lt);
        return mitabla;
    }
    /**
     * boton que gestiona la accion del boton seno
     * @param evt 
     */
    private void botonSenoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonSenoActionPerformed
 
       VentanaInterna vi =(VentanaInterna)(escritorio.getSelectedFrame());
       if (vi !=null){
           BufferedImage imgSource=vi.getLienzo().getImage();
           if(imgSource!=null){
               try{
                   //int type =LookupTableProducer.TYPE_POWER;
                   //LookupTable it=LookupTableProducer.createLookupTable(type);
                   LookupTable l=seno(180.0/255.0);
                   LookupOp lop=new LookupOp(l,null);
                   //Imagenorigen y destino iguales
                   lop.filter(imgSource,imgSource);
                   vi.getLienzo().setImage(imgSource);
                   vi.repaint();
               }catch(IllegalArgumentException e){
                   System.err.println(e.getLocalizedMessage());
               }
           }
       }
    }//GEN-LAST:event_botonSenoActionPerformed
/**
 * manejador de evento que gestiona la eleccion de un color para dibujar
 * @param evt 
 */
    private void listaColoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listaColoresActionPerformed
        // TODO add your handling code here:
         //aceso al VentanaInterna activa
        VentanaInterna vi;
        vi = (VentanaInterna)escritorio.getSelectedFrame();
        if(vi!=null){
            String colorSeleccionado=(String)listaColores.getSelectedItem();
            if(vi.getLienzo().getFiguraSeleccionada()!=null){
                if("negro".equals(colorSeleccionado))
                    //vi.getLienzo().setColor(Color.BLACK);
                    vi.getLienzo().getFiguraSeleccionada().setColor(Color.BLACK);
                if("rojo".equals(colorSeleccionado))
                    //vi.getLienzo().setColor(Color.RED);
                    vi.getLienzo().getFiguraSeleccionada().setColor(Color.RED);
                if("amarillo".equals(colorSeleccionado))
                    //vi.getLienzo().setColor(Color.YELLOW);
                    vi.getLienzo().getFiguraSeleccionada().setColor(Color.YELLOW);
                if("verde".equals(colorSeleccionado))
                   // vi.getLienzo().setColor(Color.GREEN);
                    vi.getLienzo().getFiguraSeleccionada().setColor(Color.GREEN);
                if("azul".equals(colorSeleccionado))
                    //vi.getLienzo().setColor(Color.BLUE);
                    vi.getLienzo().getFiguraSeleccionada().setColor(Color.BLUE);
                if("blanco".equals(colorSeleccionado))
                    //vi.getLienzo().setColor(Color.WHITE);
                    vi.getLienzo().getFiguraSeleccionada().setColor(Color.WHITE);
            }

            vi.getLienzo().repaint();
        }
        
    }//GEN-LAST:event_listaColoresActionPerformed
/**
 * manejador de evento que gestiona dibujar con relleno o no
 * @param evt 
 */
    private void botonRellenarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonRellenarActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi;
        //acceso al frame activo
        vi=(VentanaInterna)escritorio.getSelectedFrame();
        //acceso a linzo
        if(vi!=null){
            if(vi.getLienzo().getFiguraSeleccionada()!=null){
                if(botonRellenar.isSelected()){
                        try{
                        vi.getLienzo().getFiguraSeleccionada().setEstaRelleno(true);
                        }catch(Exception e){
                            System.out.println("error en rellenar");
                        }
                }
                 else vi.getLienzo().getFiguraSeleccionada().setEstaRelleno(false);
            }
        }
        if(vi!=null)
            vi.getLienzo().repaint();
    }//GEN-LAST:event_botonRellenarActionPerformed
/**
 * manejador de evento que gestiona la transparencia de una imagen
 * @param evt 
 */
    private void botonTransparenciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonTransparenciaActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi;
        //acceso al frame activo
        vi=(VentanaInterna)escritorio.getSelectedFrame();
        //acceso a linzo
        if(vi!=null){
            if(vi.getLienzo().getFiguraSeleccionada()!=null){
                if(botonTransparencia.isSelected()){
                    vi.getLienzo().getFiguraSeleccionada().setHayTransparencia(true);
                    //vi.getLienzo().getFiguraSeleccionada().getComposicion();
                }
                else{ 
                    vi.getLienzo().getFiguraSeleccionada().setHayTransparencia(false);
                }
            }
         }
        if(vi!=null)
            vi.getLienzo().repaint();
    }//GEN-LAST:event_botonTransparenciaActionPerformed
/**
 * manejador de evento que gestiona el alisado
 * @param evt 
 */
    private void botonAlisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAlisarActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi;
        //acceso al frame activo
        vi=(VentanaInterna)escritorio.getSelectedFrame();
        //acceso a linzo
        if(vi!=null){
            if(vi.getLienzo().getFiguraSeleccionada()!=null){
                if(botonAlisar.isSelected())
                    vi.getLienzo().getFiguraSeleccionada().setRenderizacion();
                else{
                vi.getLienzo().getFiguraSeleccionada().setRenderizacion(null);
                }
            }
        }
        if(vi!=null)
            vi.getLienzo().repaint();
    }//GEN-LAST:event_botonAlisarActionPerformed
/**
 * manejador de evento que gestiona la accion de editar la imagen
 * @param evt 
 */
    private void botonEditarStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_botonEditarStateChanged

    VentanaInterna vi;
    //acceso al frame activo
    vi=(VentanaInterna)escritorio.getSelectedFrame();
    //acceso a linzo
    if(vi!=null){
        if(botonEditar.isSelected())
            vi.getLienzo().setEditar(true);
        else vi.getLienzo().setEditar(false);
        }
    }//GEN-LAST:event_botonEditarStateChanged
/**
 * manejador de evento que la creacion de nueva imagen
 * @param evt 
 */
    private void botonNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonNuevoActionPerformed
        crearNuevaImagen();
    }//GEN-LAST:event_botonNuevoActionPerformed
   


 /**
 * manejador de evento que gestion la accion de abrir una imagen
 * @param evt 
 */
    private void botonAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAbrirActionPerformed
    // TODO add your handling code here:
    //cerrar el popupMenu
    archivo.setPopupMenuVisible(false);
    archivo.setSelected(false);
    JFileChooser dlg = new JFileChooser();
    
    //que formatos permite leer
    String[] readerFormatNames=ImageIO.getReaderFormatNames();
            
    StringBuffer cadena=new  StringBuffer();
    for (int x=0;x<readerFormatNames.length;x++){

        cadena =cadena.append(readerFormatNames[x]);
        cadena=cadena.append(" , ");
    }
           
    //añadir filtros (opcional)
    FileFilter filter=new FileNameExtensionFilter("Imagenes "+cadena, readerFormatNames);

    
    dlg.addChoosableFileFilter(filter);
    
    int resp = dlg.showOpenDialog(this);
        if( resp == JFileChooser.APPROVE_OPTION) {
            try{
                   File f = dlg.getSelectedFile();
                   if(!filter.accept(f))
                   {
                        JOptionPane.showMessageDialog(this,"Formato no soportado");
                   }else{
                        BufferedImage img = ImageIO.read(f);
                        VentanaInterna vi = new VentanaInterna();
                        vi.getLienzo().setImage(img);
                         vi.getLienzo().setAlturaClipArea(img.getHeight());
                         vi.getLienzo().setAnchuraArea(img.getWidth());
                        this.escritorio.add(vi);
                        vi.setTitle(f.getName());
                        vi.setVisible(true);
                   }
                }catch(Exception ex){
                  System.err.println("Error al leer la imagen");
                }
        }
    }//GEN-LAST:event_botonAbrirActionPerformed
/**
 * manejador de evento que gestiona la accion de guardar una imagen
 * @param evt 
 */
    private void botonGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonGuardarActionPerformed
   // TODO add your handling code here:
    //cerrar el popupMenu 
    VentanaInterna vi=(VentanaInterna) escritorio.getSelectedFrame();
        if (vi != null) {
            archivo.setPopupMenuVisible(false);
            archivo.setSelected(false);
            JFileChooser dlg = new JFileChooser();
            
            // lista de los formatos de lectura suportados
            //String[] readerFormatNames = ImageIO.getReaderFormatNames();
            //lista de los formatos de escritura soportados
            String[] writerFormatNames=ImageIO.getWriterFormatNames();
            
            StringBuffer cadena=new  StringBuffer();
            for (int x=0;x<writerFormatNames.length;x++){
                
                cadena =cadena.append(writerFormatNames[x]);
                cadena=cadena.append(" , ");
            }
           
            //añadir filtros (opcional)
              FileFilter filter=new FileNameExtensionFilter("Imagenes "+cadena, writerFormatNames);
             

            dlg.addChoosableFileFilter(filter);
            
            
            int resp = dlg.showSaveDialog(this);
            if( resp == JFileChooser.APPROVE_OPTION) {
               // try {
                      BufferedImage img = vi.getLienzo().getImage(true);
                       if(img==null)
                              System.out.println("imagen null en getImage");
                       
                      if (img != null) {
                        File f = dlg.getSelectedFile();
                      
                        if(!filter.accept(f)){
                            JOptionPane.showMessageDialog(this,"Formato no soportado");
                        }else{
                            //obtenemos la extension Ej : .png
                            String filename=dlg.getSelectedFile().getName();
                            String fileExtension=filename.substring(filename.lastIndexOf("."),filename.length());
                            //eliminamos el punto inicial de la extension Ej: png
                            fileExtension=fileExtension.substring(1);
                            //System.out.print(" Extension : "+fileExtension);
                            try{
                                ImageIO.write(img,fileExtension, f);
                            }catch(Exception e){
                                System.out.println("error al escribir la imagen");
                            }
                        }
                        
                        vi.setTitle(f.getName());
                        }
            }
        } 
        
    }//GEN-LAST:event_botonGuardarActionPerformed
    
 /**
 * manejador de evento que gestiona la accion de una suma binaria 
 * @param evt 
 */
    private void botonSumaBinarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonSumaBinarioActionPerformed
    // TODO add your handling code here:
     VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
    if (vi != null) {
     VentanaInterna viNext = (VentanaInterna) escritorio.selectFrame(true);
     if (viNext != null) {
       BufferedImage imgRight = vi.getLienzo().getImage();
       BufferedImage imgLeft = viNext.getLienzo().getImage();
        if (imgRight != null && imgLeft != null) {
            try {
                //implementar el operador SumaOp
                BinaryOp op = new SumaOp(imgLeft);
                BufferedImage imgdest = op.filter(imgRight, null);
                //System.out.println("tipo imadest en sumaBinario "+imgdest.getType());
                vi = new VentanaInterna();
                vi.getLienzo().setImage(imgdest);
                this.escritorio.add(vi);
                vi.setVisible(true);
             } catch (IllegalArgumentException e) {
              System.err.println("Error: "+e.getLocalizedMessage());
                }
        }
     }
    }

    }//GEN-LAST:event_botonSumaBinarioActionPerformed

 /**
 * manejador de evento que gestiona la accion de una resta binaria 
 * @param evt 
 */
    private void botonRestaBinariaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonRestaBinariaActionPerformed
        // TODO add your handling code here:
     VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
    if (vi != null) {
     VentanaInterna viNext = (VentanaInterna) escritorio.selectFrame(true);
        if (viNext != null) {
          BufferedImage imgRight = vi.getLienzo().getImage();
          BufferedImage imgLeft = viNext.getLienzo().getImage();
           if (imgRight != null && imgLeft != null) {
               try {
                   //implementar el operador SumaOp
                   BinaryOp op = new RestaOp(imgLeft);
                   BufferedImage imgdest = op.filter(imgRight, null);
                   //System.out.println("tipo imadest en sumaBinario "+imgdest.getType());
                   vi = new VentanaInterna();
                   vi.getLienzo().setImage(imgdest);
                   this.escritorio.add(vi);
                   vi.setVisible(true);
                } catch (IllegalArgumentException e) {
                    System.err.println("Error: "+e.getLocalizedMessage());
                   }
           }
        }
    }
    }//GEN-LAST:event_botonRestaBinariaActionPerformed
 /**
 * manejador de evento que gestiona la disminucion del escalado
 * @param evt 
 */
    private void botonEscalaDisminuirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEscalaDisminuirActionPerformed
        // TODO add your handling code here:
                // TODO add your handling code here:
        VentanaInterna vi;
        vi = (VentanaInterna)escritorio.getSelectedFrame();
        BufferedImage imgSource=vi.getLienzo().getImage();
        
        AffineTransform at=AffineTransform.getScaleInstance(0.75,0.75);
        
        try{
           AffineTransformOp atop=new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
           BufferedImage imgDest=atop.filter(imgSource,null);
           vi.getLienzo().setImage(imgDest);
           vi.getLienzo().repaint();
        }catch(Exception e){
            System.err.printf("Error al aumentar escalado");
        }
    }//GEN-LAST:event_botonEscalaDisminuirActionPerformed

     /**
 * manejador de evento que gestiona la accion del aumento del escalado
 * @param evt 
 */
    private void botonEscalaAumentarMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botonEscalaAumentarMouseReleased
        // TODO add your handling code here:
       
    }//GEN-LAST:event_botonEscalaAumentarMouseReleased
 /**
 * manejador de evento que gestiona el brillo de la imagen
 * @param evt 
 */
    private void jSliderBrilloStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSliderBrilloStateChanged
        // TODO add your handling code here:
       JSlider slider = (JSlider) evt.getSource();
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        float[] factors = new float[] {1.0f, 1.0f, 1.0f,1.0f};
        float[] offsets = new float[] { (float)slider.getValue(),(float)slider.getValue(),(float)slider.getValue(),0.0f};
        RescaleOp rop;
        if (vi != null) {
           if(img_fuente!=null)
           {
               if(!img_fuente.getColorModel().hasAlpha()){
                   rop = new RescaleOp(1.0f, (float)slider.getValue(), null);
               }else{
                    rop = new RescaleOp(factors, offsets, null);
               }
                try
                {
                   BufferedImage imgdest = rop.filter(img_fuente, null);
                   if(imgdest==null){
                       System.out.print("img_dest null en jSliderBrilloStateChanged");
                   }
                   vi.getLienzo().setImage(imgdest);
                   vi.getLienzo().repaint();
                } 
                catch(IllegalArgumentException e)
                {
                   System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_jSliderBrilloStateChanged

    private void jSliderBrilloFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jSliderBrilloFocusGained
        // TODO add your handling code here:
        //asignamos la imagen activa a la variable temporal
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
             if (vi != null)
             {
                img_fuente = vi.getLienzo().getImage();
             }
    }//GEN-LAST:event_jSliderBrilloFocusGained

    private void jSliderBrilloFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jSliderBrilloFocusLost
        // TODO add your handling code here:
        //ponemos a nul la imagen temporal img_fuente
        img_fuente=null;
    }//GEN-LAST:event_jSliderBrilloFocusLost
 /**
 * manejador de evento que gestiona el filtro de la imagen
 * @param evt 
 */
    private void jComboBoxFiltroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxFiltroActionPerformed
        
        //creacion del kernel para media 
        Kernel k_media = KernelProducer.createKernel(KernelProducer.TYPE_MEDIA_3x3);
        ConvolveOp cop = new ConvolveOp(k_media,ConvolveOp.EDGE_NO_OP,null);
        //kernel binomial
        Kernel k_binomial = KernelProducer.createKernel(KernelProducer.TYPE_BINOMIAL_3x3);
        ConvolveOp cop_binomial = new ConvolveOp(k_binomial,ConvolveOp.EDGE_NO_OP,null);
        //kernel enfoque
        Kernel k_enfoque = KernelProducer.createKernel(KernelProducer.TYPE_ENFOQUE_3x3);
        ConvolveOp cop_enfoque = new ConvolveOp(k_enfoque,ConvolveOp.EDGE_NO_OP,null);
        //kernel relieve
        Kernel k_relieve = KernelProducer.createKernel(KernelProducer.TYPE_RELIEVE_3x3);
        ConvolveOp cop_relieve = new ConvolveOp(k_relieve,ConvolveOp.EDGE_NO_OP,null);
        //kernel laplaciano
        Kernel k_laplaciano = KernelProducer.createKernel(KernelProducer.TYPE_LAPLACIANA_3x3);
        ConvolveOp cop_laplaciano = new ConvolveOp(k_laplaciano,ConvolveOp.EDGE_NO_OP,null);
        
        VentanaInterna vi= (VentanaInterna)escritorio.getSelectedFrame();
        BufferedImage imgSource=vi.getLienzo().getImage();
        BufferedImage imgOut;
         //aceso al VentanaInterna activa
        try{
        
            if(vi!=null){
                String filtroSeleccionado=(String)jComboBoxFiltro.getSelectedItem();

                if("Media".equals(filtroSeleccionado))
                {
                    imgOut = cop.filter(imgSource,null);
                    vi.getLienzo().setImage(imgOut);
                    vi.getLienzo().repaint();
                }
                if("Binomial".equals(filtroSeleccionado))
                {
                    imgOut = cop_binomial.filter(imgSource,null);
                    vi.getLienzo().setImage(imgOut);
                    vi.getLienzo().repaint();
                }
                if("Enfoque".equals(filtroSeleccionado))
                {
                    imgOut = cop_enfoque.filter(imgSource,null);
                    vi.getLienzo().setImage(imgOut);
                    vi.getLienzo().repaint();
                }
                if("Relieve".equals(filtroSeleccionado))
                {
                    imgOut = cop_relieve.filter(imgSource,null);
                    vi.getLienzo().setImage(imgOut);
                    vi.getLienzo().repaint();
                }
                if("Laplaciano".equals(filtroSeleccionado))
                {
                    imgOut = cop_laplaciano.filter(imgSource,null);
                    vi.getLienzo().setImage(imgOut);
                    vi.getLienzo().repaint();
                }
            }
            }catch(Exception e){
                   System.err.print("error en crear filtros" +e);
            }
        
    }//GEN-LAST:event_jComboBoxFiltroActionPerformed
 /**
 * manejador de evento que gestiona la rotacion de 90 grados de la imagen
 * @param evt 
 */
    private void botonRotacion180ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonRotacion180ActionPerformed
        // TODO add your handling code here:
        BufferedImage imgSource;
         //aceso al VentanaInterna activa
        
        VentanaInterna vi;
        vi = (VentanaInterna)escritorio.getSelectedFrame();
        imgSource=vi.getLienzo().getImage();
        double r = Math.toRadians(180);
        Point c = new Point(imgSource.getWidth()/2, imgSource.getHeight()/2);
        AffineTransform at = AffineTransform.getRotateInstance(r,c.x,c.y);
        AffineTransformOp atop;
        atop = new AffineTransformOp(at,AffineTransformOp.TYPE_BILINEAR);
        BufferedImage imgdest = atop.filter(imgSource, null);
        vi.getLienzo().setImage(imgdest);
        vi.getLienzo().repaint();

    }//GEN-LAST:event_botonRotacion180ActionPerformed

     /**
 * manejador de evento que gestiona el slider de la rotacion
 * @param evt 
 */
    private void jSliderRotacionStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSliderRotacionStateChanged
         JSlider slider = (JSlider) evt.getSource();
        BufferedImage imgSource=img_fuente;
        if(img_fuente==null){
            System.out.print("img_fuente es null");
        }else{
            //BufferedImage imgdest;
             //aceso al VentanaInterna activa

            VentanaInterna vi;
            vi = (VentanaInterna)escritorio.getSelectedFrame();
            //imgSource=vi.getLienzo().getImage();
            //si es canal alfa no se borra la imagen
            BufferedImage imgdest=new BufferedImage(img_fuente.getWidth(),img_fuente.getHeight(),BufferedImage.TYPE_INT_ARGB);

            double r = Math.toRadians(slider.getValue());
           // System.out.print("valor de slider "+slider.getValue());
            Point c = new Point(imgSource.getWidth()/2, imgSource.getHeight()/2);
            try{
                AffineTransform at = AffineTransform.getRotateInstance(r,c.x,c.y);
                AffineTransformOp atop;
                atop = new AffineTransformOp(at,AffineTransformOp.TYPE_BILINEAR);
                atop.filter(imgSource, imgdest);
                vi.getLienzo().setImage(imgdest);
                vi.getLienzo().repaint();
            }catch(Exception e){
                System.err.printf("Error en rotar la imagen");
            }
        }
    }//GEN-LAST:event_jSliderRotacionStateChanged

    private void jSliderRotacionFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jSliderRotacionFocusGained
        // TODO add your handling code here:
                // TODO add your handling code here:
        //asignamos la imagen activa a la variable temporal
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
             if (vi != null)
             {
                img_fuente = vi.getLienzo().getImage();
             }
    }//GEN-LAST:event_jSliderRotacionFocusGained

    private void jSliderRotacionFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jSliderRotacionFocusLost
        // TODO add your handling code here:
        img_fuente=null;
    }//GEN-LAST:event_jSliderRotacionFocusLost
 /**
 * manejador de evento que gestiona el boton de aumentar
 * @param evt 
 */
    private void botonEscalaAumentarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEscalaAumentarActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi;
        vi = (VentanaInterna)escritorio.getSelectedFrame();
        BufferedImage imgSource=vi.getLienzo().getImage();
        
        AffineTransform at=AffineTransform.getScaleInstance(1.25, 1.25);
        
       try{
           //AffineTransformOp atop=new AffineTransformOp(at, AffineTransformOp.TYPE_BICUBIC);
           //AffineTransformOp atop=new AffineTransformOp(at, AffineTransformOp.TYPE_NEAREST_NEIGHBOR);
           AffineTransformOp atop=new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
           BufferedImage imgDest=atop.filter(imgSource,null);
           vi.getLienzo().setImage(imgDest);
           vi.getLienzo().repaint();
        }catch(Exception e){
            System.err.printf("Error al aumentar escalado");
        }
        
    }//GEN-LAST:event_botonEscalaAumentarActionPerformed
 /**
 * manejador de evento que gestiona la accion de umbralizar 
 * @param evt 
 */
    private void jSliderUmbralizacionStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSliderUmbralizacionStateChanged

        if(img_fuente!=null){
           JSlider slider = (JSlider) evt.getSource();
           VentanaInterna vi;
           vi = (VentanaInterna)escritorio.getSelectedFrame();

           BufferedImage imgSource=img_fuente;
           BufferedImage imgDest;
           UmbralizacionOp uOp=new UmbralizacionOp(slider.getValue());
           imgDest=uOp.filter(imgSource,null);
           vi.getLienzo().setImage(imgDest);
           vi.getLienzo().repaint();
        }
        
    }//GEN-LAST:event_jSliderUmbralizacionStateChanged

    private void jSliderUmbralizacionFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jSliderUmbralizacionFocusGained
        // TODO add your handling code here:
         VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
             if (vi != null)
             {
                img_fuente = vi.getLienzo().getImage();
             }
    }//GEN-LAST:event_jSliderUmbralizacionFocusGained

    private void jSliderUmbralizacionFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jSliderUmbralizacionFocusLost
        // TODO add your handling code here:
         img_fuente=null;
    }//GEN-LAST:event_jSliderUmbralizacionFocusLost
 /**
 * manejador de evento que gestiona la accion de abrir un archivo de audio
 * @param evt 
 */
    private void abrirArchivoAudioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirArchivoAudioActionPerformed
        // TODO add your handling code here:
 
    JFileChooser dlg = new JFileChooser();
   
           
    //añadir filtros (opcional)
    FileFilter filter=new FileNameExtensionFilter("Audio [aifc,au,wav,aiff,snd] ", "aifc","au","wav","aiff","snd");
    
    
    dlg.addChoosableFileFilter(filter);
    
    int resp = dlg.showOpenDialog(this);
        if( resp == JFileChooser.APPROVE_OPTION) {
            try{
                   File f = dlg.getSelectedFile();
                   if(!filter.accept(f))
                   {
                        JOptionPane.showMessageDialog(this,"Formato no soportado");
                   }else{
                        
                        VentanaInternaReproductor vi = new VentanaInternaReproductor(f);
                        //vi.getLienzo().setImage(img);
                        this.escritorio.add(vi);
                        vi.setTitle(f.getName());
                        vi.setVisible(true);
                   }
                }catch(Exception ex){
                  System.err.println("Error al leer la imagen");
                }
        }
                                            

    }//GEN-LAST:event_abrirArchivoAudioActionPerformed
 /**
 * manejador de evento que gestiona la accion de grabar un audio
 * @param evt 
 */
    private void grabarArchivoAudioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_grabarArchivoAudioActionPerformed
 
    JFileChooser dlg = new JFileChooser();
         
    //añadir filtros (opcional)
    FileFilter filter=new FileNameExtensionFilter("Audio [aifc,au,wav,aiff,snd] ", "aifc","au","wav","aiff","snd");
    
    
    dlg.addChoosableFileFilter(filter);
    
    int resp = dlg.showOpenDialog(this);
        if( resp == JFileChooser.APPROVE_OPTION) {
            try{
                   File f = dlg.getSelectedFile();
                  if(!filter.accept(f))
                   {
                        JOptionPane.showMessageDialog(this,"Formato no soportado");
                  }else{
                        
                        VentanaInternaGrabador vi = new VentanaInternaGrabador(f);
                        //vi.getLienzo().setImage(img);
                        this.escritorio.add(vi);
                        vi.setTitle(f.getName());
                        vi.setVisible(true);
                   }
                }catch(Exception ex){
                  System.err.println("Error al leer la imagen");
                }
        }
    }//GEN-LAST:event_grabarArchivoAudioActionPerformed
 /**
 * manejador de evento que gestiona la accion abrir un audio
 * @param evt 
 */
    private void abrirAudioVideoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirAudioVideoActionPerformed
        // TODO add your handling code here:
         JFileChooser dlg = new JFileChooser();
    
    int resp = dlg.showOpenDialog(this);
        if( resp == JFileChooser.APPROVE_OPTION) {
            try{
                   File f = dlg.getSelectedFile();
                        //VentanaInternaJMFPlayer vi = new VentanaInternaJMFPlayer(f);
                        VentanaInternaJMFPlayer vi = VentanaInternaJMFPlayer.getInstance(f);
                        if(vi!=null){
                            //vi.getLienzo().setImage(img);
                            this.escritorio.add(vi);
                            vi.setTitle(f.getName());
                            vi.setVisible(true);
                        }else{
                            System.err.print("error en abrirAudioVideo vi es null");
                            JOptionPane.showMessageDialog(this,"Error en abrir el archivo");
                        }
                }catch(HeadlessException ex){
                  System.err.println("Error en abrir el archivo media");
                  
                }
        }
    }//GEN-LAST:event_abrirAudioVideoActionPerformed
 /**
 * manejador de evento que gestiona la accion de visualizar el panel de herramientas
 * @param evt 
 */
    private void verPanelHerramientasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verPanelHerramientasActionPerformed
        // TODO add your handling code here:
        if(verPanelHerramientas.isSelected())
           panelHerramientas.setVisible(true);
        else panelHerramientas.setVisible(false);
        
    }//GEN-LAST:event_verPanelHerramientasActionPerformed
 /**
 * manejador de evento que gestiona la accion de visualizar la lista de degradados
 * @param evt 
 */
    private void listaDegradadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listaDegradadoActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi;
        vi = (VentanaInterna)escritorio.getSelectedFrame();
        //GradientPaint gradiente=null;
        String gradienteSeleccionado=(String)listaDegradado.getSelectedItem();
        
        if(vi!=null){
            FiguraGeometrica v=vi.getLienzo().getFiguraSeleccionada();
            
            if("diagonal".equals(gradienteSeleccionado)){
            //    v.setTipoGradiente(1);
            }
            
            if("horizontal".equals(gradienteSeleccionado)){
              //   v.setTipoGradiente(2);
            }
            
            if("vertical".equals(gradienteSeleccionado)){
             //    v.setTipoGradiente(3);
            }
            if("ninguno".equals(gradienteSeleccionado)){
             //   v.setTipoGradiente(0);
            }
            
            //vi.getLienzo().getFiguraSeleccionada().setDegradado(gradiente);
            
          vi.getLienzo().repaint();
        }
        
    }//GEN-LAST:event_listaDegradadoActionPerformed
 /**
 * manejador de evento que gestiona la accion de una suma binaria 
 * @param evt 
 */
    private void listaTrazoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listaTrazoActionPerformed
        // TODO add your handling code here:
        //float dashPunteado[] = {1.0f};
        //Stroke trazoPunteado=new BasicStroke(1.0f,BasicStroke.CAP_BUTT,BasicStroke.JOIN_MITER,10.0f, dashPunteado, 5.0f);
        
        //float dashDiscontinuo[] = {15.0f};
        //Stroke trazoDiscontinuo=new BasicStroke(1.0f,BasicStroke.CAP_BUTT,BasicStroke.JOIN_MITER,10.0f, dashDiscontinuo, 5.0f);
        VentanaInterna vi;
        vi = (VentanaInterna)escritorio.getSelectedFrame();
        if(vi!=null){
            String trazoSeleccionado=(String)listaTrazo.getSelectedItem();
            if(vi.getLienzo().getFiguraSeleccionada()!=null){
                if("punteado".equals(trazoSeleccionado))
                    //vi.getLienzo().setColor(Color.BLACK);
                   // Stroke trazo =new BasicStroke();
                   // vi.getLienzo().getFiguraSeleccionada().setGrosorTrazo((BasicStroke) trazoPunteado);
                    vi.getLienzo().getFiguraSeleccionada().setTipoTrazo(2);
                if("continuo".equals(trazoSeleccionado))
                    //vi.getLienzo().setColor(Color.RED);
                    vi.getLienzo().getFiguraSeleccionada().setTipoTrazo(1);
                if("discontinuo".equals(trazoSeleccionado))
                    //vi.getLienzo().setColor(Color.YELLOW);
                   // vi.getLienzo().getFiguraSeleccionada().setGrosorTrazo((BasicStroke) trazoDiscontinuo);
               vi.getLienzo().getFiguraSeleccionada().setTipoTrazo(3);
            }

            vi.getLienzo().repaint();
        }
    }//GEN-LAST:event_listaTrazoActionPerformed

    private void botonDibujarRecRedondoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botonDibujarRecRedondoMouseClicked
        sliderRR_LC.setVisible(true);
        VentanaInterna vi;
        vi=(VentanaInterna)escritorio.getSelectedFrame();
        //acceso a linzo
        if(vi!=null){
            String dimImagen =JOptionPane.showInputDialog(
                             null, "Introduce la anchura/altura de la del las esquinas del rectangulo \n"
                                     + "(recomendable entre 10 y 60)");
           vi.getLienzo().setDimAARR(parseInt(dimImagen),parseInt(dimImagen));
            vi.getLienzo().setForma(4);
            barraNotificacion.setText("Rectangulo redondeado");
        }
    }//GEN-LAST:event_botonDibujarRecRedondoMouseClicked

    private void sliderRR_LCStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderRR_LCStateChanged
        // TODO add your handling code here:
        VentanaInterna vi;
        //acceso al frame activo
        vi=(VentanaInterna)escritorio.getSelectedFrame();
        //acceso a linzo
        if(vi!=null){
            if(vi.getLienzo().getFiguraSeleccionada()!=null){
                    vi.getLienzo().getFiguraSeleccionada().setComposicion((float)(sliderRR_LC.getValue()/10.0));
                  
            }
         }
        if(vi!=null)
            vi.getLienzo().repaint();
    }//GEN-LAST:event_sliderRR_LCStateChanged

    private void botonNegativoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonNegativoActionPerformed

         
       VentanaInterna vi =(VentanaInterna)(escritorio.getSelectedFrame());
       if (vi !=null){
           BufferedImage imgSource=vi.getLienzo().getImage();
           if(imgSource!=null){
               try{
                   //int type =LookupTableProducer.TYPE_POWER;
                   //LookupTable it=LookupTableProducer.createLookupTable(type);
                   //LookupTable l=seno(180.0/255.0);
                   LookupTable l=LookupTableProducer.negativeFuction();
                   LookupOp lop=new LookupOp(l,null);
                   //Imagenorigen y destino iguales
                   lop.filter(imgSource,imgSource);
                   vi.getLienzo().setImage(imgSource);
                   vi.repaint();
               }catch(IllegalArgumentException e){
                   System.err.println(e.getLocalizedMessage());
               }
           }
       }
    }//GEN-LAST:event_botonNegativoActionPerformed

    private void botonGrisesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonGrisesActionPerformed
       VentanaInterna vi =(VentanaInterna)(escritorio.getSelectedFrame());
       if (vi !=null){
           BufferedImage imgSource=vi.getLienzo().getImage();
           if(imgSource!=null){
               try{
                    ICC_Profile ip;
                    ip = ICC_Profile.getInstance(ColorSpace.CS_GRAY);
                    ColorSpace cs = new ICC_ColorSpace(ip);
                    ColorConvertOp ccop = new ColorConvertOp(cs,null);
                    BufferedImage imgdest = ccop.filter(imgSource,null);
                    vi.getLienzo().setImage(imgdest);
                    vi.repaint();
              }catch(IllegalArgumentException e){
              System.err.println(e.getLocalizedMessage());
              }
          }
       }
    }//GEN-LAST:event_botonGrisesActionPerformed

    private void botonClonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonClonActionPerformed
    //seleccion de la ventana actual
    VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
    if (vi != null) {
     //VentanaInterna viNext = (VentanaInterna) escritorio.selectFrame(true);
       // if (viNext != null) {
          try{  
            //la imagen actual
            BufferedImage imgRight = vi.getLienzo().getImage(true);
            //crear una nueva ventana 
            VentanaInterna vi2=new VentanaInterna(this);
            //asignamos la imagen actual  a la nueva ventana
            vi2.getLienzo().setImage(imgRight);
            this.escritorio.add(vi2);
            vi2.setVisible(true);
          }  
          catch (IllegalArgumentException e) {
            System.err.println("Error en copiar la imagen: "+e.getLocalizedMessage());
          }
    }        
    }//GEN-LAST:event_botonClonActionPerformed

    private void botonLineaCurvaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botonLineaCurvaMouseClicked
       // sliderRR_LC.setVisible(true);
        VentanaInterna vi;
        vi=(VentanaInterna)escritorio.getSelectedFrame();
        //acceso a linzo
        if(vi!=null){
          //  String dimImagen =JOptionPane.showInputDialog(
           //                  null, "Introduce la anchura/altura de la del las esquinas del rectangulo \n"
           //                          + "(recomendable entre 10 y 60)");
          // vi.getLienzo().setDimAARR(parseInt(dimImagen),parseInt(dimImagen));
            vi.getLienzo().setForma(5);
            barraNotificacion.setText("linea curva");
        }
        
    }//GEN-LAST:event_botonLineaCurvaMouseClicked


    /**************************************************************************/
    /*
    metodos modificadores de las caracterisiticas de las formas
    */

    /**
     * modifica el valor del spinner
     * @param nuevoValorSpinner
     */
    /**
     * establecer nuevo valor grosor del trazo
     * @param nuevoValorSpinner 
     */
    public void setSpinnerGrosor(float nuevoValorSpinner)
    {
        if(nuevoValorSpinner!=-1)
            listaGrosor.setValue(nuevoValorSpinner);
    }
    /**
     * modificar el estado de editar
     * @param nuevoEditar 
     */
    public void setEditarActivo(boolean nuevoEditar)
    {
        botonEditar.setSelected(nuevoEditar);
    }
    /**
     * modificar estado de alisado
     * @param nuevoEditar 
     */
    public void setAlisarActivo(boolean nuevoEditar)
    {
        botonAlisar.setSelected(nuevoEditar);
    }
    /**
     * modificar estado de relleno de una figura
     * @param nuevoEditar 
     */
    public void setRellenoActivo(boolean nuevoEditar)
    {
        botonRellenar.setSelected(nuevoEditar);
    }
    /**
     * modificar el estado de transparencia de una figura
     * @param nuevoEditar 
     */
    public void setTransparenciaActivo(boolean nuevoEditar)
    {
        botonTransparencia.setSelected(nuevoEditar);
    }
 
    
    /**
     * modificar el color acivo
     * @param nuevoColor nuevo Color para establecer
     */
    
    public void setColorActivo(Color nuevoColor)
    {
        
        if(nuevoColor!=null){
            if(nuevoColor==Color.YELLOW)
                listaColores.setSelectedIndex(1);
            if(nuevoColor==Color.BLUE)
                listaColores.setSelectedIndex(2);
            if(nuevoColor==Color.WHITE)
                listaColores.setSelectedIndex(5);
            if(nuevoColor==Color.BLACK)
                listaColores.setSelectedIndex(3);
            if(nuevoColor==Color.RED)
                listaColores.setSelectedIndex(0);
            if(nuevoColor==Color.GREEN)
                listaColores.setSelectedIndex(4);
        }else
        {
          buttonGroup2PaletaColores.clearSelection();
        }
    }
    
        
    
    /**
     * metodo modificador de la forma
     * @param formaActiva la forma activa
     */
    
    public void setBotonFormaActiva(int formaActiva)
    { 
            switch(formaActiva)
            {  //activar el boton punto
                case 0:
                    botonDibujarPunto.setSelected(true);
                break;
                case 1:
                    botonDibujarLinea.setSelected(true);
                break;
                case 2:
                    botonDibujarCuadrado.setSelected(true);
                    break;
                case 3:
                    botonDibujarElipse.setSelected(true);
                    break;
                case -1:
                    GroupButtonNav.clearSelection();
                    break;
            }
    }

    
    /*
    metodos selectores de las caracterisiticas de las formas
    */
    /**
     * devuelve so el boton editar esta activo
     * @return true en caso afirmativo,false en caso contrario 
     */
    public boolean getEditarActivo()
    {
        return botonEditar.isSelected();
    }
    /**
     * devuelve true si el boton de alisado esta activo
     * @return 
     */
    public boolean getAlisarActivo()
    {
        return botonAlisar.isSelected();
    }
    /**
     * devuelve true so el boton de relleno esta activo
     * @return 
     */
    public boolean getRellenoActivo()
    {
        return botonRellenar.isSelected();
    }
    /**
     * devuelve true si el boton de transparencia esta activo
     * @return 
     */
    public boolean getTransparenciaActivo()
    {
        return botonTransparencia.isSelected();
    }
    /**
     * devuelve el color Activo
     * @return 
     */
        public Color getColorActivo()
    { 
        String colorSeleccionado=(String)listaColores.getSelectedItem();
        
            if("amarillo".equals(colorSeleccionado))
                return Color.YELLOW;
            if("azul".equals(colorSeleccionado))
                return Color.BLUE;
            if("blanco".equals(colorSeleccionado))
                return Color.WHITE;
            if("negro".equals(colorSeleccionado))
                return Color.BLACK;
            if("rojo".equals(colorSeleccionado))
                return Color.RED;
            if("verde".equals(colorSeleccionado))
                return Color.GREEN;
            return null;
    }
        
               
     /**
     * devuelve el valor del spinner
     * @return el valor del spinner
     */
    public float getSpinnerGrosor()
    {
        return (float) listaGrosor.getValue();
    }
    
        
    /**
     * metodo que devuelve la forma activa de la barra de herramientas
     * @return un entero
     */
    public int getBotonFormaActiva()
    {
       if(botonDibujarPunto.isSelected())
           return 0;
       if(botonDibujarLinea.isSelected())
           return 1;
       if(botonDibujarCuadrado.isSelected())
           return 2;
       if(botonDibujarElipse.isSelected())
           return 3;
       //si no hay ninguno seleccionado 
       return -1;
    }
    
   /**************************************************************************/

    /**
     * crear nueva ventana interna y establecer la imagen en dentro
     */
    public void crearNuevaImagen(){
        //establecer la dimensiones de la imagen
        String dimImagen =JOptionPane.showInputDialog(
                             null, "Introduce la anchura/altura de la imagen ");
        if(dimImagen!=null){
            //System.out.println("dim="+dimImagen);
            //le pasamos el padre
            //grabarArchivoAudio.setPopupMenuVisible(false);
            //grabarArchivoAudio.setSelected(false);
            VentanaInterna vi=new VentanaInterna(this);
            JInternalFrame misventanas[]=escritorio.getAllFrames();
            //si no hay VentanaInterna Activa, la primera la coloco en el 0,0
            //si hay, la coloca segun la posicion de la VentanaActiva
            if (misventanas.length==0 ){

                escritorio.add(vi);

                vi.setVisible(true);
            }else{
                Point p =escritorio.getSelectedFrame().getLocation();
                 p.x=p.x+20;
                 p.y=p.y+20;
                vi.setLocation(p);

                escritorio.add(vi);

                vi.setVisible(true);
            }
            BufferedImage img=null;
            establecerImagen(img, vi, parseInt(dimImagen), parseInt(dimImagen));
        }       
    }
    /**
     * crear una imagen
     * @param img la imagen
     * @param vi la ventana interan donde se dibuja la imagen
     * @param anchura la anchura de la imagen
     * @param altura la altura
     */
        public void establecerImagen(BufferedImage img,VentanaInterna vi,int anchura,int altura){
       img = new BufferedImage(anchura,altura,BufferedImage.TYPE_INT_ARGB);
       vi.getLienzo().setImage(img); 
       //establecer el area de recorte a la dimensiones del lienzo
       vi.getLienzo().setAlturaClipArea(altura);
       vi.getLienzo().setAnchuraArea(anchura);
       
       Graphics2D g = (Graphics2D) img.getGraphics();
        Shape s;
        s=new Rectangle(0,0,img.getWidth(), img.getHeight());
        Color c= Color.WHITE;

        g.setColor(c);
        g.fill(s);
       
        
    }
    
  

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBoxMenuItem BarraEstado;
    private javax.swing.JMenu Edicion;
    private javax.swing.ButtonGroup GroupButtonNav;
    private javax.swing.JMenuItem Nuevo;
    private javax.swing.JMenuItem abrirArchivo;
    private javax.swing.JMenuItem abrirArchivoAudio;
    private javax.swing.JMenuItem abrirAudioVideo;
    private javax.swing.JMenu archivo;
    private javax.swing.JCheckBoxMenuItem barraAtributos;
    private javax.swing.JCheckBoxMenuItem barraFormas;
    public javax.swing.JToolBar barraNavegacion;
    private javax.swing.JLabel barraNotificacion;
    private javax.swing.JToggleButton botonAbrir;
    private javax.swing.JToggleButton botonAlisar;
    private javax.swing.JToggleButton botonClon;
    private javax.swing.JToggleButton botonContrasteIluminacion;
    private javax.swing.JToggleButton botonContrasteNormal;
    private javax.swing.JToggleButton botonContrasteOscurecimiento;
    private javax.swing.JToggleButton botonDibujarCuadrado;
    private javax.swing.JToggleButton botonDibujarElipse;
    private javax.swing.JToggleButton botonDibujarLinea;
    private javax.swing.JToggleButton botonDibujarPunto;
    private javax.swing.JToggleButton botonDibujarRecRedondo;
    private javax.swing.JToggleButton botonEditar;
    private javax.swing.JToggleButton botonEscalaAumentar;
    private javax.swing.JToggleButton botonEscalaDisminuir;
    private javax.swing.JToggleButton botonGrises;
    private javax.swing.JToggleButton botonGuardar;
    private javax.swing.JToggleButton botonLineaCurva;
    private javax.swing.JToggleButton botonNegativo;
    private javax.swing.JToggleButton botonNuevo;
    private javax.swing.JToggleButton botonRellenar;
    private javax.swing.JToggleButton botonRestaBinaria;
    private javax.swing.JToggleButton botonRotacion180;
    private javax.swing.JToggleButton botonRotacion270;
    private javax.swing.JToggleButton botonRotacion90;
    private javax.swing.JToggleButton botonSeno;
    private javax.swing.JToggleButton botonSumaBinario;
    private javax.swing.JToggleButton botonTransparencia;
    private javax.swing.ButtonGroup buttonGroup2PaletaColores;
    private javax.swing.ButtonGroup buttonGroupBotonesContraste;
    private javax.swing.ButtonGroup buttonGroupEscalar;
    private javax.swing.ButtonGroup buttonGroupRotacion;
    private javax.swing.ButtonGroup buttonOpcionArchivo;
    private javax.swing.JPanel contenedorBinarias;
    private javax.swing.JPanel contenedorBotonSeno;
    private javax.swing.JPanel contenedorBotonesBinarias;
    private javax.swing.JPanel contenedorBotonesRotacion;
    private javax.swing.JPanel contenedorBotonesRotacion2;
    private javax.swing.JPanel contenedorBotonesZoom;
    private javax.swing.JPanel contenedorBrillo;
    private javax.swing.JPanel contenedorBrilloInterno;
    private javax.swing.JPanel contenedorContraste;
    private javax.swing.JPanel contenedorContrasteBotones;
    private javax.swing.JPanel contenedorEscala;
    private javax.swing.JPanel contenedorEscritorio;
    private javax.swing.JPanel contenedorEsq_linea;
    private javax.swing.JPanel contenedorFiltro;
    private javax.swing.JPanel contenedorFiltroInterno;
    private javax.swing.JPanel contenedorInterno_Esq_linea;
    private javax.swing.JPanel contenedorPosRaton;
    private javax.swing.JPanel contenedorRotacion;
    private javax.swing.JPanel contenedorSeno;
    private javax.swing.JPanel contenedorTrazo;
    private javax.swing.JPanel contenedorTrazoInterno;
    private javax.swing.JPanel contenedorUmbralizacion;
    private javax.swing.JPanel contenedorUmbralizacionInterno;
    public javax.swing.JDesktopPane escritorio;
    private javax.swing.JLabel etiqBrillo;
    private javax.swing.JLabel etiqUmbralizacion;
    private javax.swing.JLabel etiquetaPosRaton;
    private javax.swing.JMenuItem grabarArchivoAudio;
    private javax.swing.JMenuItem guardarArchivo;
    private javax.swing.JComboBox jComboBoxFiltro;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JSlider jSliderBrillo;
    private javax.swing.JSlider jSliderRotacion;
    private javax.swing.JSlider jSliderUmbralizacion;
    private javax.swing.JComboBox listaColores;
    private javax.swing.JComboBox listaDegradado;
    private javax.swing.JSpinner listaGrosor;
    private javax.swing.JComboBox listaTrazo;
    public javax.swing.JLabel mousePosition;
    private javax.swing.JPanel panelBarraNotificacion;
    private javax.swing.JPanel panelBarraTrabajo;
    private javax.swing.JPanel panelHerramientas;
    private javax.swing.JToolBar.Separator separadorAtributos;
    private javax.swing.JToolBar.Separator separadorColores;
    private javax.swing.JToolBar.Separator separadorFormas;
    private javax.swing.JSlider sliderRR_LC;
    private javax.swing.JCheckBoxMenuItem verPanelHerramientas;
    // End of variables declaration//GEN-END:variables
    
}
